
first_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000954  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ae8  08000ae8  00010af0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae8  08000ae8  00010af0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae8  08000af0  00010af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aec  08000aec  00010aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010af0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ada  00000000  00000000  00010b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004f8  00000000  00000000  000125f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00012af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  00012c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000243c  00000000  00000000  00012d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001637  00000000  00000000  00015154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008cd2  00000000  00000000  0001678b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001f45d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000404  00000000  00000000  0001f4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ac4 	.word	0x08000ac4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ac4 	.word	0x08000ac4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for (uint32_t i=0; i<500000;i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0007a11f 	.word	0x0007a11f

08000204 <SPI_GPIO_Inits>:
/* SPI1_ NSS =  PA4 A2  */
/* SPI1_ CLK  = PA5 D13 */
/* SPI1_ MISO = PA6 D12 */
/* SPI1_ MOSI = PA7 D11 */

void SPI_GPIO_Inits(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI_GPIO_Handle;
	SPI_GPIO_Handle.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALT;
 800020a:	2302      	movs	r3, #2
 800020c:	727b      	strb	r3, [r7, #9]
	SPI_GPIO_Handle.GPIO_PinConfig.GPIO_PinAltFuncMode=5;
 800020e:	2305      	movs	r3, #5
 8000210:	737b      	strb	r3, [r7, #13]
	SPI_GPIO_Handle.GPIO_PinConfig.GPIO_OPType=GPIO_OPTYPE_PP;
 8000212:	2300      	movs	r3, #0
 8000214:	733b      	strb	r3, [r7, #12]
	SPI_GPIO_Handle.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PIN_NOPU_NOPD;
 8000216:	2300      	movs	r3, #0
 8000218:	72fb      	strb	r3, [r7, #11]
	SPI_GPIO_Handle.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_HIGH;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]
	SPI_GPIO_Handle.pGPIOx=GPIOA;
 800021e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000222:	607b      	str	r3, [r7, #4]
	GPIO_PeriCloclControl(GPIOA, ENABLE);
 8000224:	2101      	movs	r1, #1
 8000226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022a:	f000 f8d7 	bl	80003dc <GPIO_PeriCloclControl>

	//NSS
	SPI_GPIO_Handle.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_4;
 800022e:	2304      	movs	r3, #4
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_GPIO_Handle);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f947 	bl	80004c8 <GPIO_Init>

	//SCK
	SPI_GPIO_Handle.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_5;
 800023a:	2305      	movs	r3, #5
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_GPIO_Handle);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f941 	bl	80004c8 <GPIO_Init>
	//MISO
	//SPI_GPIO_Handle.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_6;
	//GPIO_Init(&SPI_GPIO_Handle);

	//MOSI
	SPI_GPIO_Handle.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_7;
 8000246:	2307      	movs	r3, #7
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_GPIO_Handle);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f93b 	bl	80004c8 <GPIO_Init>




}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <SPI1_Inits>:
void SPI1_Inits(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0

	SPI_PeriCloclControl(SPI1, ENABLE);
 8000262:	2101      	movs	r1, #1
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <SPI1_Inits+0x40>)
 8000266:	f000 fae7 	bl	8000838 <SPI_PeriCloclControl>
	SPI_Handle_t SPI_Handle;
	SPI_Handle.pSPIx=SPI1;
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <SPI1_Inits+0x40>)
 800026c:	607b      	str	r3, [r7, #4]
	SPI_Handle.SPI_Config.SPI_DeviceMode=SPI_MASTER;
 800026e:	2301      	movs	r3, #1
 8000270:	723b      	strb	r3, [r7, #8]
	SPI_Handle.SPI_Config.SPI_BusConfig=SPI_BCONFIG_FD;
 8000272:	2301      	movs	r3, #1
 8000274:	727b      	strb	r3, [r7, #9]
	SPI_Handle.SPI_Config.SPI_Speed=SR_BR_PCLK_DIV_2;
 8000276:	2300      	movs	r3, #0
 8000278:	73bb      	strb	r3, [r7, #14]
	SPI_Handle.SPI_Config.SPI_DFF=SPI_DFF_8BIT;
 800027a:	2300      	movs	r3, #0
 800027c:	72bb      	strb	r3, [r7, #10]
	SPI_Handle.SPI_Config.SPI_CPHA=SPI_CPHA_0;
 800027e:	2300      	movs	r3, #0
 8000280:	72fb      	strb	r3, [r7, #11]
	SPI_Handle.SPI_Config.SPI_CPOL=SPI_CPOL_0;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
	SPI_Handle.SPI_Config.SPI_SSM=SPI_SSM_DI;
 8000286:	2300      	movs	r3, #0
 8000288:	737b      	strb	r3, [r7, #13]

	SPI_Init(&SPI_Handle);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fb09 	bl	80008a4 <SPI_Init>

}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40013000 	.word	0x40013000

080002a0 <Button_GPIO_Inits>:

void Button_GPIO_Inits(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Bttn ={0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
	GPIO_Bttn.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_INPUT;
 80002b0:	2300      	movs	r3, #0
 80002b2:	727b      	strb	r3, [r7, #9]
	GPIO_Bttn.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PIN_NOPU_NOPD;
 80002b4:	2300      	movs	r3, #0
 80002b6:	72fb      	strb	r3, [r7, #11]
	GPIO_Bttn.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_HIGH;
 80002b8:	2302      	movs	r3, #2
 80002ba:	72bb      	strb	r3, [r7, #10]
	GPIO_Bttn.pGPIOx=GPIOA;
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c0:	607b      	str	r3, [r7, #4]
	GPIO_Bttn.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_12;
 80002c2:	230c      	movs	r3, #12
 80002c4:	723b      	strb	r3, [r7, #8]
	GPIO_PeriCloclControl(GPIOA, ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f000 f886 	bl	80003dc <GPIO_PeriCloclControl>
	GPIO_Init(&GPIO_Bttn);
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8f8 	bl	80004c8 <GPIO_Init>

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <main>:

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	char u_data[]="Hola amigo";
 80002e6:	4a26      	ldr	r2, [pc, #152]	; (8000380 <main+0xa0>)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ec:	c303      	stmia	r3!, {r0, r1}
 80002ee:	801a      	strh	r2, [r3, #0]
 80002f0:	3302      	adds	r3, #2
 80002f2:	0c12      	lsrs	r2, r2, #16
 80002f4:	701a      	strb	r2, [r3, #0]

	Button_GPIO_Inits();
 80002f6:	f7ff ffd3 	bl	80002a0 <Button_GPIO_Inits>
	SPI_GPIO_Inits();
 80002fa:	f7ff ff83 	bl	8000204 <SPI_GPIO_Inits>
	SPI1_Inits();
 80002fe:	f7ff ffad 	bl	800025c <SPI1_Inits>

	SPI_SSOE_Control(SPI1, ENABLE); //Enable Output in master mode and SPI enabled.
 8000302:	2101      	movs	r1, #1
 8000304:	481f      	ldr	r0, [pc, #124]	; (8000384 <main+0xa4>)
 8000306:	f000 fb50 	bl	80009aa <SPI_SSOE_Control>
	//SPI_SSI_Control(SPI1,ENABLE); Not required for DISABLED SSM

	while(1){
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_12)){}
 800030a:	bf00      	nop
 800030c:	210c      	movs	r1, #12
 800030e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000312:	f000 fa7b 	bl	800080c <GPIO_ReadFromInputPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f7      	beq.n	800030c <main+0x2c>
		delay();
 800031c:	f7ff ff5c 	bl	80001d8 <delay>
		SPI_Control(SPI1,ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	4818      	ldr	r0, [pc, #96]	; (8000384 <main+0xa4>)
 8000324:	f000 fb26 	bl	8000974 <SPI_Control>
		uint8_t dlen=strlen(u_data);
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff4c 	bl	80001c8 <strlen>
 8000330:	4603      	mov	r3, r0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	70fb      	strb	r3, [r7, #3]

		SPI_SendData(SPI1,&dlen, 1);
 8000336:	1cfb      	adds	r3, r7, #3
 8000338:	2201      	movs	r2, #1
 800033a:	4619      	mov	r1, r3
 800033c:	4811      	ldr	r0, [pc, #68]	; (8000384 <main+0xa4>)
 800033e:	f000 fb65 	bl	8000a0c <SPI_SendData>
		while(GetFlagStatus(SPI1, SPI_BP_BSY)){}
 8000342:	bf00      	nop
 8000344:	2107      	movs	r1, #7
 8000346:	480f      	ldr	r0, [pc, #60]	; (8000384 <main+0xa4>)
 8000348:	f000 fb4a 	bl	80009e0 <GetFlagStatus>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f8      	bne.n	8000344 <main+0x64>
		SPI_SendData(SPI1,(uint8_t*)u_data, strlen(u_data));
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff37 	bl	80001c8 <strlen>
 800035a:	4602      	mov	r2, r0
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	4808      	ldr	r0, [pc, #32]	; (8000384 <main+0xa4>)
 8000362:	f000 fb53 	bl	8000a0c <SPI_SendData>
		while(GetFlagStatus(SPI1, SPI_BP_BSY)){}
 8000366:	bf00      	nop
 8000368:	2107      	movs	r1, #7
 800036a:	4806      	ldr	r0, [pc, #24]	; (8000384 <main+0xa4>)
 800036c:	f000 fb38 	bl	80009e0 <GetFlagStatus>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1f8      	bne.n	8000368 <main+0x88>
		SPI_Control(SPI1,DISABLE);
 8000376:	2100      	movs	r1, #0
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <main+0xa4>)
 800037a:	f000 fafb 	bl	8000974 <SPI_Control>
	while(1){
 800037e:	e7c4      	b.n	800030a <main+0x2a>
 8000380:	08000adc 	.word	0x08000adc
 8000384:	40013000 	.word	0x40013000

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 fb61 	bl	8000a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff91 	bl	80002e0 <main>

080003be <LoopForever>:

LoopForever:
    b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000af0 	.word	0x08000af0
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <GPIO_PeriCloclControl>:
* @Note 		- none
*
*/

void GPIO_PeriCloclControl(GPIO_RegDef_t* pGPIOx,uint8_t EnorDi)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE){
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d156      	bne.n	800049c <GPIO_PeriCloclControl+0xc0>
		if(pGPIOx==GPIOA){
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriCloclControl+0x28>
			GPIOA_PCLK_EN();
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
		}
		else{
		//Not a port
		}
	}
}
 8000402:	e04b      	b.n	800049c <GPIO_PeriCloclControl+0xc0>
		else if(pGPIOx==GPIOB){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a29      	ldr	r2, [pc, #164]	; (80004ac <GPIO_PeriCloclControl+0xd0>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriCloclControl+0x3e>
			GPIOB_PCLK_EN();
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 800040e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000410:	4a25      	ldr	r2, [pc, #148]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000418:	e040      	b.n	800049c <GPIO_PeriCloclControl+0xc0>
		else if(pGPIOx==GPIOC){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a24      	ldr	r2, [pc, #144]	; (80004b0 <GPIO_PeriCloclControl+0xd4>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriCloclControl+0x54>
			GPIOC_PCLK_EN();
 8000422:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a20      	ldr	r2, [pc, #128]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800042e:	e035      	b.n	800049c <GPIO_PeriCloclControl+0xc0>
		else if(pGPIOx==GPIOD){
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <GPIO_PeriCloclControl+0xd8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriCloclControl+0x6a>
			GPIOD_PCLK_EN();
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043c:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000444:	e02a      	b.n	800049c <GPIO_PeriCloclControl+0xc0>
		else if(pGPIOx==GPIOE){
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a1b      	ldr	r2, [pc, #108]	; (80004b8 <GPIO_PeriCloclControl+0xdc>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriCloclControl+0x80>
			GPIOE_PCLK_EN();
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000454:	f043 0310 	orr.w	r3, r3, #16
 8000458:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800045a:	e01f      	b.n	800049c <GPIO_PeriCloclControl+0xc0>
		else if(pGPIOx==GPIOF){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a17      	ldr	r2, [pc, #92]	; (80004bc <GPIO_PeriCloclControl+0xe0>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriCloclControl+0x96>
			GPIOF_PCLK_EN();
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 800046a:	f043 0320 	orr.w	r3, r3, #32
 800046e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000470:	e014      	b.n	800049c <GPIO_PeriCloclControl+0xc0>
		else if(pGPIOx==GPIOG){
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <GPIO_PeriCloclControl+0xe4>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriCloclControl+0xac>
			GPIOG_PCLK_EN();
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000486:	e009      	b.n	800049c <GPIO_PeriCloclControl+0xc0>
		else if(pGPIOx==GPIOH){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <GPIO_PeriCloclControl+0xe8>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d105      	bne.n	800049c <GPIO_PeriCloclControl+0xc0>
			GPIOH_PCLK_EN();
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <GPIO_PeriCloclControl+0xcc>)
 8000496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000
 80004ac:	48000400 	.word	0x48000400
 80004b0:	48000800 	.word	0x48000800
 80004b4:	48000c00 	.word	0x48000c00
 80004b8:	48001000 	.word	0x48001000
 80004bc:	48001400 	.word	0x48001400
 80004c0:	48001800 	.word	0x48001800
 80004c4:	48001c00 	.word	0x48001c00

080004c8 <GPIO_Init>:
* @return 		- none
*
* @Note 		- none
*
*/
void GPIO_Init(GPIO_Handle_t * pGPIO_Handle){
 80004c8:	b480      	push	{r7}
 80004ca:	b087      	sub	sp, #28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]

	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d822      	bhi.n	8000522 <GPIO_Init+0x5a>
		temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode)<<(2*(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	795b      	ldrb	r3, [r3, #5]
 80004e0:	461a      	mov	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->MODER&=~((0x3)<<(2*(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2103      	movs	r1, #3
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	400a      	ands	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER|=temp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6819      	ldr	r1, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	430a      	orrs	r2, r1
 800051a:	601a      	str	r2, [r3, #0]
		temp=0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e0d2      	b.n	80006c8 <GPIO_Init+0x200>

	}
	else{

		if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b04      	cmp	r3, #4
 8000528:	d117      	bne.n	800055a <GPIO_Init+0x92>
			EXTI->FTSR1|=1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber;
 800052a:	4b4d      	ldr	r3, [pc, #308]	; (8000660 <GPIO_Init+0x198>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a49      	ldr	r2, [pc, #292]	; (8000660 <GPIO_Init+0x198>)
 800053c:	430b      	orrs	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b47      	ldr	r3, [pc, #284]	; (8000660 <GPIO_Init+0x198>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	43d2      	mvns	r2, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a43      	ldr	r2, [pc, #268]	; (8000660 <GPIO_Init+0x198>)
 8000554:	400b      	ands	r3, r1
 8000556:	6093      	str	r3, [r2, #8]
 8000558:	e035      	b.n	80005c6 <GPIO_Init+0xfe>


		}
		else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT){
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	2b05      	cmp	r3, #5
 8000560:	d117      	bne.n	8000592 <GPIO_Init+0xca>
			EXTI->RTSR1 |= 1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber;
 8000562:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <GPIO_Init+0x198>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	4611      	mov	r1, r2
 8000572:	4a3b      	ldr	r2, [pc, #236]	; (8000660 <GPIO_Init+0x198>)
 8000574:	430b      	orrs	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	4b39      	ldr	r3, [pc, #228]	; (8000660 <GPIO_Init+0x198>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	43d2      	mvns	r2, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a35      	ldr	r2, [pc, #212]	; (8000660 <GPIO_Init+0x198>)
 800058c:	400b      	ands	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
 8000590:	e019      	b.n	80005c6 <GPIO_Init+0xfe>

		}
		else if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT){
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b06      	cmp	r3, #6
 8000598:	d115      	bne.n	80005c6 <GPIO_Init+0xfe>
			EXTI->FTSR1|=1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber;
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <GPIO_Init+0x198>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <GPIO_Init+0x198>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1|=1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber;
 80005b0:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <GPIO_Init+0x198>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <GPIO_Init+0x198>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6093      	str	r3, [r2, #8]
		}
		else{

		}

		temp=(GPIO_MODE_INPUT)<<(2*(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->MODER&=~((0x3)<<(2*(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	2103      	movs	r1, #3
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	400a      	ands	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER|=temp;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6819      	ldr	r1, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	697a      	ldr	r2, [r7, #20]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
		temp=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

		uint8_t portcode= GPIOBD_TO_PORT(pGPIO_Handle->pGPIOx);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000604:	d03a      	beq.n	800067c <GPIO_Init+0x1b4>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <GPIO_Init+0x19c>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d024      	beq.n	800065a <GPIO_Init+0x192>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <GPIO_Init+0x1a0>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d01d      	beq.n	8000656 <GPIO_Init+0x18e>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <GPIO_Init+0x1a4>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d016      	beq.n	8000652 <GPIO_Init+0x18a>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <GPIO_Init+0x1a8>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d00f      	beq.n	800064e <GPIO_Init+0x186>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <GPIO_Init+0x1ac>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d008      	beq.n	800064a <GPIO_Init+0x182>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <GPIO_Init+0x1b0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d101      	bne.n	8000646 <GPIO_Init+0x17e>
 8000642:	2306      	movs	r3, #6
 8000644:	e01b      	b.n	800067e <GPIO_Init+0x1b6>
 8000646:	2307      	movs	r3, #7
 8000648:	e019      	b.n	800067e <GPIO_Init+0x1b6>
 800064a:	2305      	movs	r3, #5
 800064c:	e017      	b.n	800067e <GPIO_Init+0x1b6>
 800064e:	2304      	movs	r3, #4
 8000650:	e015      	b.n	800067e <GPIO_Init+0x1b6>
 8000652:	2303      	movs	r3, #3
 8000654:	e013      	b.n	800067e <GPIO_Init+0x1b6>
 8000656:	2302      	movs	r3, #2
 8000658:	e011      	b.n	800067e <GPIO_Init+0x1b6>
 800065a:	2301      	movs	r3, #1
 800065c:	e00f      	b.n	800067e <GPIO_Init+0x1b6>
 800065e:	bf00      	nop
 8000660:	40010400 	.word	0x40010400
 8000664:	48000400 	.word	0x48000400
 8000668:	48000800 	.word	0x48000800
 800066c:	48000c00 	.word	0x48000c00
 8000670:	48001000 	.word	0x48001000
 8000674:	48001400 	.word	0x48001400
 8000678:	48001800 	.word	0x48001800
 800067c:	2300      	movs	r3, #0
 800067e:	74fb      	strb	r3, [r7, #19]
		uint8_t index=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	089b      	lsrs	r3, r3, #2
 8000686:	74bb      	strb	r3, [r7, #18]
		uint8_t temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)%4;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	f003 0303 	and.w	r3, r3, #3
 8000690:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR_1_4[index]=portcode<<(temp*4);
 8000692:	7cfa      	ldrb	r2, [r7, #19]
 8000694:	7c7b      	ldrb	r3, [r7, #17]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	fa02 f103 	lsl.w	r1, r2, r3
 800069c:	4a58      	ldr	r2, [pc, #352]	; (8000800 <GPIO_Init+0x338>)
 800069e:	7cbb      	ldrb	r3, [r7, #18]
 80006a0:	3302      	adds	r3, #2
 80006a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		SYSCFG_PCLK_EN();
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <GPIO_Init+0x33c>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006aa:	4a56      	ldr	r2, [pc, #344]	; (8000804 <GPIO_Init+0x33c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6613      	str	r3, [r2, #96]	; 0x60

		EXTI->IMR1|=(1<<pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006b2:	4b55      	ldr	r3, [pc, #340]	; (8000808 <GPIO_Init+0x340>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	7912      	ldrb	r2, [r2, #4]
 80006ba:	4611      	mov	r1, r2
 80006bc:	2201      	movs	r2, #1
 80006be:	408a      	lsls	r2, r1
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a51      	ldr	r2, [pc, #324]	; (8000808 <GPIO_Init+0x340>)
 80006c4:	430b      	orrs	r3, r1
 80006c6:	6013      	str	r3, [r2, #0]



	}

	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed)<<(2*(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	799b      	ldrb	r3, [r3, #6]
 80006cc:	461a      	mov	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OSPEEDER&=~((0x3)<<(2*(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	2103      	movs	r1, #3
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	400a      	ands	r2, r1
 80006f6:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDER|=temp;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6899      	ldr	r1, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	430a      	orrs	r2, r1
 8000706:	609a      	str	r2, [r3, #8]
	temp=0;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_OPType)<<((pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7a1b      	ldrb	r3, [r3, #8]
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OTYPER&=~((0x1)<<((pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	4619      	mov	r1, r3
 8000728:	2301      	movs	r3, #1
 800072a:	408b      	lsls	r3, r1
 800072c:	43db      	mvns	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	400a      	ands	r2, r1
 8000736:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER|=temp;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6859      	ldr	r1, [r3, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	430a      	orrs	r2, r1
 8000746:	605a      	str	r2, [r3, #4]
	temp=0;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

	temp=(pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl)<<(2*(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	79db      	ldrb	r3, [r3, #7]
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OPUPDR&=~((0x3)<<(2*(pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2103      	movs	r1, #3
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	400a      	ands	r2, r1
 800077a:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->OPUPDR|=temp;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68d9      	ldr	r1, [r3, #12]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	430a      	orrs	r2, r1
 800078a:	60da      	str	r2, [r3, #12]
	temp=0;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

	uint8_t temp1=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	08db      	lsrs	r3, r3, #3
 8000796:	743b      	strb	r3, [r7, #16]
	uint8_t temp2=pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	f003 0307 	and.w	r3, r3, #7
 80007a0:	73fb      	strb	r3, [r7, #15]

	pGPIO_Handle->pGPIOx->AFR[temp1]&=~((0xF)<<(4*temp2));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	7c3a      	ldrb	r2, [r7, #16]
 80007a8:	3208      	adds	r2, #8
 80007aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	220f      	movs	r2, #15
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	7c3a      	ldrb	r2, [r7, #16]
 80007c2:	4001      	ands	r1, r0
 80007c4:	3208      	adds	r2, #8
 80007c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIO_Handle->pGPIOx->AFR[temp1]|=((pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFuncMode)<<(4*temp2));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	7c3a      	ldrb	r2, [r7, #16]
 80007d0:	3208      	adds	r2, #8
 80007d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7a5b      	ldrb	r3, [r3, #9]
 80007da:	461a      	mov	r2, r3
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	7c3a      	ldrb	r2, [r7, #16]
 80007ec:	4301      	orrs	r1, r0
 80007ee:	3208      	adds	r2, #8
 80007f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80007f4:	bf00      	nop
 80007f6:	371c      	adds	r7, #28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40010000 	.word	0x40010000
 8000804:	40021000 	.word	0x40021000
 8000808:	40010400 	.word	0x40010400

0800080c <GPIO_ReadFromInputPin>:
* @return 		- Value of the PinNumber of port
*
* @Note 		- none
*
*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber){
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]

	uint8_t value;

	value= (uint8_t)((pGPIOx->IDR)>>PinNumber) & 0x00000001;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	691a      	ldr	r2, [r3, #16]
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	fa22 f303 	lsr.w	r3, r2, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]

	return value;
 800082a:	7bfb      	ldrb	r3, [r7, #15]

}
 800082c:	4618      	mov	r0, r3
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
	...

08000838 <SPI_PeriCloclControl>:
 *      Author: franc
 */

#include "stm32l476xx_spi_driver.h"

void SPI_PeriCloclControl(SPI_RegDef_t* pSPIx,uint8_t EnorDi){
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE){
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d11f      	bne.n	800088a <SPI_PeriCloclControl+0x52>
			if(pSPIx==SPI1){
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a11      	ldr	r2, [pc, #68]	; (8000894 <SPI_PeriCloclControl+0x5c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d106      	bne.n	8000860 <SPI_PeriCloclControl+0x28>
				SPI1_PLCK_EN();
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <SPI_PeriCloclControl+0x60>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <SPI_PeriCloclControl+0x60>)
 8000858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800085c:	6613      	str	r3, [r2, #96]	; 0x60
			}
			else{
			//Not a port
			}
		}
}
 800085e:	e014      	b.n	800088a <SPI_PeriCloclControl+0x52>
			else if(pSPIx==SPI2){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <SPI_PeriCloclControl+0x64>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d106      	bne.n	8000876 <SPI_PeriCloclControl+0x3e>
				SPI2_PCLK_EN();
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <SPI_PeriCloclControl+0x60>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086c:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SPI_PeriCloclControl+0x60>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000874:	e009      	b.n	800088a <SPI_PeriCloclControl+0x52>
			else if(pSPIx==SPI3){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <SPI_PeriCloclControl+0x68>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d105      	bne.n	800088a <SPI_PeriCloclControl+0x52>
				SPI3_PCLK_EN();
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SPI_PeriCloclControl+0x60>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SPI_PeriCloclControl+0x60>)
 8000884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40013000 	.word	0x40013000
 8000898:	40021000 	.word	0x40021000
 800089c:	40003800 	.word	0x40003800
 80008a0:	40003c00 	.word	0x40003c00

080008a4 <SPI_Init>:
/*Init De-Init*/
void SPI_Init(SPI_Handle_t * pSPI_Handle){
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]

	temp|=((pSPI_Handle->SPI_Config.SPI_DeviceMode) << 2);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]

	if(pSPI_Handle->SPI_Config.SPI_BusConfig==SPI_BCONFIG_FD){
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	795b      	ldrb	r3, [r3, #5]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d104      	bne.n	80008d0 <SPI_Init+0x2c>
		temp&=~(1<<15);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e014      	b.n	80008fa <SPI_Init+0x56>
	}else if(pSPI_Handle->SPI_Config.SPI_BusConfig==SPI_BCONFIG_HD){
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	795b      	ldrb	r3, [r3, #5]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d104      	bne.n	80008e2 <SPI_Init+0x3e>
		temp|=(1<<15);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e00b      	b.n	80008fa <SPI_Init+0x56>

	}else if(pSPI_Handle->SPI_Config.SPI_BusConfig==SPI_BCONFIG_S_RX){
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d107      	bne.n	80008fa <SPI_Init+0x56>
		temp&=~(1<<15);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008f0:	60fb      	str	r3, [r7, #12]
		temp|=(1<<10);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f8:	60fb      	str	r3, [r7, #12]
	}
	else{

	}
	temp|=((pSPI_Handle->SPI_Config.SPI_CPHA) << 0);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	79db      	ldrb	r3, [r3, #7]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4313      	orrs	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
	temp|=((pSPI_Handle->SPI_Config.SPI_CPOL) << 1);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7a1b      	ldrb	r3, [r3, #8]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	461a      	mov	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4313      	orrs	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
	temp|=((pSPI_Handle->SPI_Config.SPI_Speed) << 3);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7a9b      	ldrb	r3, [r3, #10]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
	temp|=((pSPI_Handle->SPI_Config.SPI_SSM) << 9);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7a5b      	ldrb	r3, [r3, #9]
 8000926:	025b      	lsls	r3, r3, #9
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
	pSPI_Handle->pSPIx->CR1&=~(0x7FFF);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800093e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000942:	6013      	str	r3, [r2, #0]
	pSPI_Handle->pSPIx->CR1=temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	601a      	str	r2, [r3, #0]

	pSPI_Handle->pSPIx->CR2&=~(0x7FFF);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800095a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800095e:	6053      	str	r3, [r2, #4]
	pSPI_Handle->pSPIx->CR2=0x0700;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000968:	605a      	str	r2, [r3, #4]
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SPI_Control>:

}

/*Enable SPI*/

void SPI_Control(SPI_RegDef_t* pSPIx, uint8_t EnorDi){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE ){
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d106      	bne.n	8000994 <SPI_Control+0x20>
		pSPIx->CR1|=(1<<SPI_BP_SPE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1&=~(1<<SPI_BP_SPE);
	}

}
 8000992:	e005      	b.n	80009a0 <SPI_Control+0x2c>
		pSPIx->CR1&=~(1<<SPI_BP_SPE);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <SPI_SSOE_Control>:
	else{
		pSPIx->CR1&=~(1<<SPI_BP_SSI);
	}

}
void SPI_SSOE_Control(SPI_RegDef_t* pSPIx, uint8_t EnorDi){
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE ){
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d106      	bne.n	80009ca <SPI_SSOE_Control+0x20>
			pSPIx->CR2|=(1<<SPI_BP_SSOE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f043 0204 	orr.w	r2, r3, #4
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
		}
		else{
			pSPIx->CR2&=~(1<<SPI_BP_SSOE);
		}

}
 80009c8:	e005      	b.n	80009d6 <SPI_SSOE_Control+0x2c>
			pSPIx->CR2&=~(1<<SPI_BP_SSOE);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f023 0204 	bic.w	r2, r3, #4
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	605a      	str	r2, [r3, #4]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <GetFlagStatus>:

/*Data send and Receive*/

uint8_t GetFlagStatus(SPI_RegDef_t* pSPIx, uint32_t FLAGNAME){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	if((pSPIx->SR & (1<<FLAGNAME))>0){
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2101      	movs	r1, #1
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <GetFlagStatus+0x20>
		return FLAG_SET;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <GetFlagStatus+0x22>
	}
	else{
		return FLAG_RESET;
 8000a00:	2300      	movs	r3, #0
	}
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t* pSPIx, uint8_t* pTXBuffer, uint32_t len){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	while(len>0){
 8000a18:	e028      	b.n	8000a6c <SPI_SendData+0x60>
		while(GetFlagStatus(pSPIx,SPI_BP_TXE) == FLAG_RESET);
 8000a1a:	bf00      	nop
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff ffde 	bl	80009e0 <GetFlagStatus>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f8      	beq.n	8000a1c <SPI_SendData+0x10>
		if((pSPIx->CR2 & (0xF<<8))== 0x0F00){
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8000a36:	d10e      	bne.n	8000a56 <SPI_SendData+0x4a>
			pSPIx->DR=*((uint16_t *)pTXBuffer);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	60da      	str	r2, [r3, #12]
			len--;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
			len--;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTXBuffer++;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	e00a      	b.n	8000a6c <SPI_SendData+0x60>
		}
		else{
			*((uint8_t *)&(pSPIx->DR))=*((uint8_t *)pTXBuffer);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	330c      	adds	r3, #12
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	701a      	strb	r2, [r3, #0]
			len--;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
			pTXBuffer++;
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
	while(len>0){
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1d3      	bne.n	8000a1a <SPI_SendData+0xe>
		}

	}

}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <__libc_init_array>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4d0d      	ldr	r5, [pc, #52]	; (8000ab4 <__libc_init_array+0x38>)
 8000a80:	4c0d      	ldr	r4, [pc, #52]	; (8000ab8 <__libc_init_array+0x3c>)
 8000a82:	1b64      	subs	r4, r4, r5
 8000a84:	10a4      	asrs	r4, r4, #2
 8000a86:	2600      	movs	r6, #0
 8000a88:	42a6      	cmp	r6, r4
 8000a8a:	d109      	bne.n	8000aa0 <__libc_init_array+0x24>
 8000a8c:	4d0b      	ldr	r5, [pc, #44]	; (8000abc <__libc_init_array+0x40>)
 8000a8e:	4c0c      	ldr	r4, [pc, #48]	; (8000ac0 <__libc_init_array+0x44>)
 8000a90:	f000 f818 	bl	8000ac4 <_init>
 8000a94:	1b64      	subs	r4, r4, r5
 8000a96:	10a4      	asrs	r4, r4, #2
 8000a98:	2600      	movs	r6, #0
 8000a9a:	42a6      	cmp	r6, r4
 8000a9c:	d105      	bne.n	8000aaa <__libc_init_array+0x2e>
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa4:	4798      	blx	r3
 8000aa6:	3601      	adds	r6, #1
 8000aa8:	e7ee      	b.n	8000a88 <__libc_init_array+0xc>
 8000aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aae:	4798      	blx	r3
 8000ab0:	3601      	adds	r6, #1
 8000ab2:	e7f2      	b.n	8000a9a <__libc_init_array+0x1e>
 8000ab4:	08000ae8 	.word	0x08000ae8
 8000ab8:	08000ae8 	.word	0x08000ae8
 8000abc:	08000ae8 	.word	0x08000ae8
 8000ac0:	08000aec 	.word	0x08000aec

08000ac4 <_init>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	bf00      	nop
 8000ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aca:	bc08      	pop	{r3}
 8000acc:	469e      	mov	lr, r3
 8000ace:	4770      	bx	lr

08000ad0 <_fini>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	bf00      	nop
 8000ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad6:	bc08      	pop	{r3}
 8000ad8:	469e      	mov	lr, r3
 8000ada:	4770      	bx	lr
